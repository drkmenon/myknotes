{
  "hash": "c195bee206098a3fdc313512226cb9b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data wrangling\"\ncode-fold: true\n---\n\n\n\n\nData wrangling is the process of making data ready for modelling. It is a tedious task and involves different logical steps.\n\n\n\n\n```{mermaid}\nflowchart LR\n    Record --> Data --> Tidy-data --> Data-analysis\n    \n```\n\n\n\n\n## Core Concepts \n\n1.  Always look directly into data and see how it look like\n\n2.  Think how it should look like\n\n3.  Think how to rearrange Information to achieve what we want \n\n4.  Make sure that what we does is doing what we want at every step. \n\n`r` is an excellent lower level language for data wrangling. The newer `data.table` make it even more faster and intuitive. `data. table` package in `r` is faster than not only tidyverse, it beats most other languages including python. Mainly used for data manipulation, it retains native `data. frame` and all functions written for base r and tidyverse work with data. table. \n\neg: `% > %` is called pipe function. It essentially means 'take whatever on the left side and make it the first argument for anything on the right Side'. It comes with tidyverse package. It can also be used with `data.table.` [^1]\n\n[^1]: Now from r 4.1 onwards it is built in to base v as I \\>\n\n## data.table\n\n`data.table` looks like `data.frame` superficially but it is lot more efficient, fast and allow numerous actions by simple commands.\n\n\n\n\n```{mermaid}\nflowchart TD\nA{data.table} --> B[i]\nB --> C[subsetting row]\nA --> D[j]\nD --> E[subsetting & calculating in column]\nA --> F[by]\nF --> G[grouping]\nA --> H[useful codes]\nH --> I[fread]\nH --> J[walrus]\n```\n\n\n\n\nOld `data.frame` allow sub-setting rows and selecting columns. `data.table` which uses the extended syntax\n\n$$\ndt[i,j,by]\n$$\n\nallow lot more options.\n\n### i,j and by\n\n**`i`**`allows sub-setting and ordering row`\n\n`dt[i]` allow multiple actions at row level of the data. Fundamentally this can be grouped in to sub-setting and ordering.\n\n\n\n\n```{mermaid}\nflowchart TD\ni --> subsetting\ni --> ordering\n\n```\n\n\n\n\n#### Sub-setting\n\nLet us take an example,\n\nWe have a data set called `virtual.csv` stored in our computer. The data belongs to a quasi experimental study which compared the effectiveness of virtual class room with respect to physical class room. It also compared the student perception of the two modalities on a likert scale. Study divided students in to two groups, virtual and physical and asked following questions:\n\n-   Is there any difference in the post test score of students in virtual and physical group?\n\n<!-- -->\n\n-   Is there any difference in the student perception in virtual and physical group about the modality of delivery of class?\n\nWe can bring it to `r` environment using `fread` command in the data.table library.\n\n``` r\nlibrary(data.table)\ndt=fread(\"virtual.csv\")\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\ndt=fread(\"virtual.csv\")\n```\n:::\n\n\n\n\nWe can see that it contains a set of simple data comparing the performance of medical students in physical classes vs virtual classes and their perceptions.\n\n##### Select only virtual data\n\nAssume, we want to see only the virtual class students. This can be easily achieved by sub-setting the type.class key in the data by \"virtual\" as shown below.\n\n``` r\nlibrary(data.table)\ndt=fread(\"virtual.csv\")\ndtv=dt[type.class == \"virtual\"]\nhead(dtv)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\ndt=fread(\"virtual.csv\")\ndtv=dt[type.class == \"virtual\"]\nhead(dtv)\n##    idertifier type.class pretest.score pretest.rank posttest.score\n##        <char>     <char>         <int>        <int>          <int>\n## 1:       VIR1    virtual            40            2            100\n## 2:       VIR2    virtual            40            2             95\n## 3:       VIR3    virtual            60            3             85\n## 4:       VIR4    virtual            40            2             70\n## 5:       VIR5    virtual            60            3             75\n## 6:       VIR6    virtual            60            3             90\n##    posttest.rank   sex likert.1 likert.2 likert.3 likert.4 likert.5 likert.6\n##            <int> <int>    <int>    <int>    <int>    <int>    <int>    <int>\n## 1:             5     1        3        4        3        3        4        4\n## 2:             5     1        3        5        4        2        3        4\n## 3:             5     2        4        4        3        3        4        3\n## 4:             4     2        5        4        4        2        3        4\n## 5:             4     1        4        4        3        3        4        3\n## 6:             5     1        3        5        3        2        3        4\n##    likert.7 likert.8 likert.9 likert.10 likert.total\n##       <int>    <int>    <int>     <int>        <num>\n## 1:        4        2        4         2          3.3\n## 2:        4        3        4         4          3.6\n## 3:        4        2        3         2          3.2\n## 4:        4        3        4         2          3.5\n## 5:        4        2        4         2          3.3\n## 6:        3        3        3         4          3.3\n```\n:::\n\n\n\n\n##### Select first 2 rows\n\nIf we want to select only first 2 rows[^2] , us the following code.\n\n[^2]: note that, \\[1:2,\\] is not necessary. However \\[1:2,\\] shows the full picture.\n\n    > Select first 2 rows and retain all the columns\n\n``` r\ndt2=dt[1:2]\ndt2\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt2=dt[1:2]\ndt2\n##    idertifier type.class pretest.score pretest.rank posttest.score\n##        <char>     <char>         <int>        <int>          <int>\n## 1:       VIR1    virtual            40            2            100\n## 2:       VIR2    virtual            40            2             95\n##    posttest.rank   sex likert.1 likert.2 likert.3 likert.4 likert.5 likert.6\n##            <int> <int>    <int>    <int>    <int>    <int>    <int>    <int>\n## 1:             5     1        3        4        3        3        4        4\n## 2:             5     1        3        5        4        2        3        4\n##    likert.7 likert.8 likert.9 likert.10 likert.total\n##       <int>    <int>    <int>     <int>        <num>\n## 1:        4        2        4         2          3.3\n## 2:        4        3        4         4          3.6\n```\n:::\n\n\n\n\n##### Ordering\n\nVariables in the rows can be arranged in ascending or descending order by using the `order()` command as shown below.\n\n``` r\ndta=dt[order(posttest.score)] # use -posttest.score for descending order\ndta\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndta=dt[order(posttest.score)] \n# use -posttest.score for descending order\ndta\n##     idertifier type.class pretest.score pretest.rank posttest.score\n##         <char>     <char>         <int>        <int>          <int>\n##  1:      PHY23   physical            20            1             50\n##  2:      VIR11    virtual            40            2             55\n##  3:      VIR16    virtual            60            3             55\n##  4:      VIR24    virtual            60            3             55\n##  5:       VIR8    virtual            40            2             60\n##  6:       PHY2   physical            40            2             60\n##  7:       PHY3   physical            40            2             60\n##  8:      VIR23    virtual            80            4             65\n##  9:      PHY24   physical            40            2             65\n## 10:       VIR4    virtual            40            2             70\n## 11:      VIR22    virtual            60            3             70\n## 12:      PHY12   physical             0            1             70\n## 13:       VIR5    virtual            60            3             75\n## 14:      VIR13    virtual            40            2             75\n## 15:      VIR25    virtual            60            3             75\n## 16:       PHY5   physical            20            1             75\n## 17:      PHY10   physical            80            4             75\n## 18:      PHY11   physical            20            1             75\n## 19:       VIR7    virtual            40            2             80\n## 20:      VIR14    virtual            20            1             80\n## 21:      VIR18    virtual            80            4             80\n## 22:      VIR19    virtual            60            3             80\n## 23:      VIR20    virtual            20            1             80\n## 24:       PHY8   physical            40            2             80\n## 25:      PHY15   physical            20            1             80\n## 26:      PHY16   physical            20            1             80\n## 27:      PHY17   physical            40            2             80\n## 28:      PHY18   physical            60            3             80\n## 29:      PHY19   physical            20            2             80\n## 30:      PHY22   physical            80            4             80\n## 31:       VIR3    virtual            60            3             85\n## 32:      VIR17    virtual            40            2             85\n## 33:      VIR21    virtual            80            4             85\n## 34:       PHY4   physical            60            3             85\n## 35:       PHY7   physical            20            1             85\n## 36:       PHY9   physical            20            1             85\n## 37:      PHY13   physical             0            1             85\n## 38:      PHY20   physical            60            3             85\n## 39:      PHY21   physical            60            3             85\n## 40:       VIR6    virtual            60            3             90\n## 41:       VIR9    virtual            20            1             90\n## 42:      VIR10    virtual            60            3             90\n## 43:      VIR12    virtual             0            1             90\n## 44:      VIR15    virtual            20            1             90\n## 45:       PHY1   physical            40            2             90\n## 46:       PHY6   physical            60            3             90\n## 47:      PHY14   physical             0            1             90\n## 48:       VIR2    virtual            40            2             95\n## 49:       VIR1    virtual            40            2            100\n##     idertifier type.class pretest.score pretest.rank posttest.score\n##     posttest.rank   sex likert.1 likert.2 likert.3 likert.4 likert.5 likert.6\n##             <int> <int>    <int>    <int>    <int>    <int>    <int>    <int>\n##  1:             3     1        3        2        5        5        4        2\n##  2:             3     1        3        5        4        3        4        4\n##  3:             3     2        3        4        3        3        3        4\n##  4:             3     2        4        4        3        3        4        3\n##  5:             3     2        3        5        3        2        2        3\n##  6:             3     2        4        2        4        4        4        4\n##  7:             3     2        4        4        4        2        4        4\n##  8:             4     2        4        4        4        4        4        2\n##  9:             4     1        4        2        5        5        5        4\n## 10:             4     2        5        4        4        2        3        4\n## 11:             4     1        4        4        4        4        2        2\n## 12:             4     2        5        4        4        3        3        4\n## 13:             4     1        4        4        3        3        4        3\n## 14:             4     1        3        4        3        3        3        3\n## 15:             4     2        4        4        4        4        4        4\n## 16:             4     2        4        4        5        4        4        5\n## 17:             4     2        4        4        4        3        3        4\n## 18:             4     1        5        4        3        3        4        3\n## 19:             4     2        4        4        4        3        4        3\n## 20:             4     2        3        4        4        4        3        3\n## 21:             4     2        4        4        2        4        4        2\n## 22:             4     1        5        4        3        3        3        3\n## 23:             4     2        4        4        2        3        4        4\n## 24:             4     2        4        4        3        4        3        4\n## 25:             4     2        4        4        4        4        4        4\n## 26:             4     2        3        4        4        4        5        3\n## 27:             4     1        4        4        5        3        4        4\n## 28:             4     2        4        4        3        4        5        2\n## 29:             4     2        4        4        5        4        4        4\n## 30:             4     2        3        2        5        5        5        4\n## 31:             5     2        4        4        3        3        4        3\n## 32:             5     2        4        4        2        3        2        4\n## 33:             5     2        4        4        3        3        4        4\n## 34:             5     2        3        4        4        2        3        4\n## 35:             5     2        4        4        4        4        4        4\n## 36:             5     1        4        2        4        4        4        4\n## 37:             5     1        5        4        4        4        4        3\n## 38:             5     1        4        2        5        5        5        2\n## 39:             5     2        4        4        5        3        4        4\n## 40:             5     1        3        5        3        2        3        4\n## 41:             5     2        4        5        3        3        4        4\n## 42:             5     2        3        5        4        2        3        4\n## 43:             5     1        4        4        3        3        3        4\n## 44:             5     2        5        4        4        3        4        3\n## 45:             5     1        4        4        5        4        3        5\n## 46:             5     1        4        4        4        2        3        5\n## 47:             5     2        4        4        3        4        2        4\n## 48:             5     1        3        5        4        2        3        4\n## 49:             5     1        3        4        3        3        4        4\n##     posttest.rank   sex likert.1 likert.2 likert.3 likert.4 likert.5 likert.6\n##     likert.7 likert.8 likert.9 likert.10 likert.total\n##        <int>    <int>    <int>     <int>        <num>\n##  1:        3        4        5         4          3.7\n##  2:        4        4        4         3          3.8\n##  3:        3        4        4         4          3.5\n##  4:        3        4        2         4          3.4\n##  5:        3        4        4         2          3.1\n##  6:        3        4        4         5          3.8\n##  7:        3        4        4         4          3.7\n##  8:        3        4        4         4          3.7\n##  9:        3        4        5         4          4.1\n## 10:        4        3        4         2          3.5\n## 11:        3        4        4         4          3.5\n## 12:        4        4        3         4          3.8\n## 13:        4        2        4         2          3.3\n## 14:        4        4        2         3          3.2\n## 15:        4        3        4         5          4.0\n## 16:        4        4        3         4          4.1\n## 17:        4        3        4         4          3.7\n## 18:        4        3        4         4          3.7\n## 19:        3        2        3         2          3.2\n## 20:        4        4        4         4          3.7\n## 21:        4        4        3         3          3.4\n## 22:        4        4        3         3          3.5\n## 23:        4        4        2         4          3.5\n## 24:        4        4        4         5          3.9\n## 25:        3        4        4         4          3.9\n## 26:        4        4        4         4          3.9\n## 27:        3        4        3         4          3.8\n## 28:        3        4        3         4          3.6\n## 29:        3        4        3         4          3.9\n## 30:        3        4        5         4          4.0\n## 31:        4        2        3         2          3.2\n## 32:        4        4        4         4          3.5\n## 33:        4        4        4         4          3.8\n## 34:        4        3        4         5          3.6\n## 35:        4        3        4         5          4.0\n## 36:        4        4        4         4          3.8\n## 37:        4        4        4         4          4.0\n## 38:        3        4        3         4          3.7\n## 39:        3        4        3         4          3.8\n## 40:        3        3        3         4          3.3\n## 41:        3        4        4         3          3.7\n## 42:        3        4        4         4          3.6\n## 43:        4        4        3         3          3.5\n## 44:        3        4        4         4          3.8\n## 45:        4        4        4         4          4.1\n## 46:        4        3        4         5          3.8\n## 47:        3        4        4         4          3.6\n## 48:        4        3        4         4          3.6\n## 49:        4        2        4         2          3.3\n##     likert.7 likert.8 likert.9 likert.10 likert.total\n```\n:::\n\n\n\n\n**`j`**`allows manipulations in the column`\n\ndt\\[,j\\] allow selection, correction or mutation and calculations at column level.\n\n\n\n\n```{mermaid}\nflowchart TD\nA{j} --> B[Select]\nA --> C[Calculation]\nA --> D[Correct typo]\nA --> E[Add or Delete column]\n\n```\n\n\n\n\n##### Select specific column[^3]\n\n[^3]: dt\\[,.(j)\\]: blank followed by , denotes selecting all rows. \".\" denote \"list\". if \"`.\"`is not used, data.table will give the output as vectors, instead of list.\n\nSuppose we want to select only the necessary columns from our `dt` data set. We can do this by simple code as shown below.\n\n``` r\ndtc=dt[,.(idertifier,type.class,pretest.score,posttest.score,sex,likert.total)]\ndtc\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtc=dt[,.(idertifier,type.class,pretest.score,posttest.score,sex,likert.total)]\ndtc\n##     idertifier type.class pretest.score posttest.score   sex likert.total\n##         <char>     <char>         <int>          <int> <int>        <num>\n##  1:       VIR1    virtual            40            100     1          3.3\n##  2:       VIR2    virtual            40             95     1          3.6\n##  3:       VIR3    virtual            60             85     2          3.2\n##  4:       VIR4    virtual            40             70     2          3.5\n##  5:       VIR5    virtual            60             75     1          3.3\n##  6:       VIR6    virtual            60             90     1          3.3\n##  7:       VIR7    virtual            40             80     2          3.2\n##  8:       VIR8    virtual            40             60     2          3.1\n##  9:       VIR9    virtual            20             90     2          3.7\n## 10:      VIR10    virtual            60             90     2          3.6\n## 11:      VIR11    virtual            40             55     1          3.8\n## 12:      VIR12    virtual             0             90     1          3.5\n## 13:      VIR13    virtual            40             75     1          3.2\n## 14:      VIR14    virtual            20             80     2          3.7\n## 15:      VIR15    virtual            20             90     2          3.8\n## 16:      VIR16    virtual            60             55     2          3.5\n## 17:      VIR17    virtual            40             85     2          3.5\n## 18:      VIR18    virtual            80             80     2          3.4\n## 19:      VIR19    virtual            60             80     1          3.5\n## 20:      VIR20    virtual            20             80     2          3.5\n## 21:      VIR21    virtual            80             85     2          3.8\n## 22:      VIR22    virtual            60             70     1          3.5\n## 23:      VIR23    virtual            80             65     2          3.7\n## 24:      VIR24    virtual            60             55     2          3.4\n## 25:      VIR25    virtual            60             75     2          4.0\n## 26:       PHY1   physical            40             90     1          4.1\n## 27:       PHY2   physical            40             60     2          3.8\n## 28:       PHY3   physical            40             60     2          3.7\n## 29:       PHY4   physical            60             85     2          3.6\n## 30:       PHY5   physical            20             75     2          4.1\n## 31:       PHY6   physical            60             90     1          3.8\n## 32:       PHY7   physical            20             85     2          4.0\n## 33:       PHY8   physical            40             80     2          3.9\n## 34:       PHY9   physical            20             85     1          3.8\n## 35:      PHY10   physical            80             75     2          3.7\n## 36:      PHY11   physical            20             75     1          3.7\n## 37:      PHY12   physical             0             70     2          3.8\n## 38:      PHY13   physical             0             85     1          4.0\n## 39:      PHY14   physical             0             90     2          3.6\n## 40:      PHY15   physical            20             80     2          3.9\n## 41:      PHY16   physical            20             80     2          3.9\n## 42:      PHY17   physical            40             80     1          3.8\n## 43:      PHY18   physical            60             80     2          3.6\n## 44:      PHY19   physical            20             80     2          3.9\n## 45:      PHY20   physical            60             85     1          3.7\n## 46:      PHY21   physical            60             85     2          3.8\n## 47:      PHY22   physical            80             80     2          4.0\n## 48:      PHY23   physical            20             50     1          3.7\n## 49:      PHY24   physical            40             65     1          4.1\n##     idertifier type.class pretest.score posttest.score   sex likert.total\n```\n:::\n\n\n\n\n`data.table`‘s `j` can handle more than just *selecting columns* - it can handle *expressions*, i.e., *computing on columns*. \n\n##### Correct typos\n\nIn the dataset dt, we can see that the first key, identifier is misspelt as idertifier. We can correct it by following code\n\n``` r\ndtc=dt[,.(identifier=idertifier,type.class,pretest.score,posttest.score,sex,likert.total)]\ndtc\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtc=dt[,.(identifier=idertifier,type.class,pretest.score,posttest.score,sex,likert.total)]\ndtc\n##     identifier type.class pretest.score posttest.score   sex likert.total\n##         <char>     <char>         <int>          <int> <int>        <num>\n##  1:       VIR1    virtual            40            100     1          3.3\n##  2:       VIR2    virtual            40             95     1          3.6\n##  3:       VIR3    virtual            60             85     2          3.2\n##  4:       VIR4    virtual            40             70     2          3.5\n##  5:       VIR5    virtual            60             75     1          3.3\n##  6:       VIR6    virtual            60             90     1          3.3\n##  7:       VIR7    virtual            40             80     2          3.2\n##  8:       VIR8    virtual            40             60     2          3.1\n##  9:       VIR9    virtual            20             90     2          3.7\n## 10:      VIR10    virtual            60             90     2          3.6\n## 11:      VIR11    virtual            40             55     1          3.8\n## 12:      VIR12    virtual             0             90     1          3.5\n## 13:      VIR13    virtual            40             75     1          3.2\n## 14:      VIR14    virtual            20             80     2          3.7\n## 15:      VIR15    virtual            20             90     2          3.8\n## 16:      VIR16    virtual            60             55     2          3.5\n## 17:      VIR17    virtual            40             85     2          3.5\n## 18:      VIR18    virtual            80             80     2          3.4\n## 19:      VIR19    virtual            60             80     1          3.5\n## 20:      VIR20    virtual            20             80     2          3.5\n## 21:      VIR21    virtual            80             85     2          3.8\n## 22:      VIR22    virtual            60             70     1          3.5\n## 23:      VIR23    virtual            80             65     2          3.7\n## 24:      VIR24    virtual            60             55     2          3.4\n## 25:      VIR25    virtual            60             75     2          4.0\n## 26:       PHY1   physical            40             90     1          4.1\n## 27:       PHY2   physical            40             60     2          3.8\n## 28:       PHY3   physical            40             60     2          3.7\n## 29:       PHY4   physical            60             85     2          3.6\n## 30:       PHY5   physical            20             75     2          4.1\n## 31:       PHY6   physical            60             90     1          3.8\n## 32:       PHY7   physical            20             85     2          4.0\n## 33:       PHY8   physical            40             80     2          3.9\n## 34:       PHY9   physical            20             85     1          3.8\n## 35:      PHY10   physical            80             75     2          3.7\n## 36:      PHY11   physical            20             75     1          3.7\n## 37:      PHY12   physical             0             70     2          3.8\n## 38:      PHY13   physical             0             85     1          4.0\n## 39:      PHY14   physical             0             90     2          3.6\n## 40:      PHY15   physical            20             80     2          3.9\n## 41:      PHY16   physical            20             80     2          3.9\n## 42:      PHY17   physical            40             80     1          3.8\n## 43:      PHY18   physical            60             80     2          3.6\n## 44:      PHY19   physical            20             80     2          3.9\n## 45:      PHY20   physical            60             85     1          3.7\n## 46:      PHY21   physical            60             85     2          3.8\n## 47:      PHY22   physical            80             80     2          4.0\n## 48:      PHY23   physical            20             50     1          3.7\n## 49:      PHY24   physical            40             65     1          4.1\n##     identifier type.class pretest.score posttest.score   sex likert.total\n```\n:::\n\n\n\n\n##### Computing on columns\n\nTo calculate the mean post test score of the virtual class, following code can be used.\n\n``` r\ndtm=dtc[type.class==\"virtual\",mean(posttest.score)]\ndtm\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtm=dtc[type.class==\"virtual\",mean(posttest.score)]\ndtm\n## [1] 78.2\n```\n:::\n\n\n\n\n##### Add or delete column\n\nIf we want to add mean post test score of virtual on to dtv.\n\nTo create or delete column, we use `:=`, called walrus operator.[^4]\n\n[^4]: The walrus is a large pinniped marine mammal with discontinuous distribution about the North Pole in the Arctic Ocean and subarctic seas of the Northern Hemisphere. \n\n``` r\ndtvm=dtc[,mean.pt.score:=mean(posttest.score)]\ndtvm\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtvm=dtc[,mean.pt.score:=mean(posttest.score)]\nhead(dtvm)\n##    identifier type.class pretest.score posttest.score   sex likert.total\n##        <char>     <char>         <int>          <int> <int>        <num>\n## 1:       VIR1    virtual            40            100     1          3.3\n## 2:       VIR2    virtual            40             95     1          3.6\n## 3:       VIR3    virtual            60             85     2          3.2\n## 4:       VIR4    virtual            40             70     2          3.5\n## 5:       VIR5    virtual            60             75     1          3.3\n## 6:       VIR6    virtual            60             90     1          3.3\n##    mean.pt.score\n##            <num>\n## 1:      78.06122\n## 2:      78.06122\n## 3:      78.06122\n## 4:      78.06122\n## 5:      78.06122\n## 6:      78.06122\n```\n:::\n\n\n\n\nTo delete mean.pt.score,\n\n``` r\ndtvn=dtvm[,mean.pt.score:=NULL]\ndtvn\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtvn=dtvm[,mean.pt.score:=NULL]\nhead(dtvn)\n##    identifier type.class pretest.score posttest.score   sex likert.total\n##        <char>     <char>         <int>          <int> <int>        <num>\n## 1:       VIR1    virtual            40            100     1          3.3\n## 2:       VIR2    virtual            40             95     1          3.6\n## 3:       VIR3    virtual            60             85     2          3.2\n## 4:       VIR4    virtual            40             70     2          3.5\n## 5:       VIR5    virtual            60             75     1          3.3\n## 6:       VIR6    virtual            60             90     1          3.3\n```\n:::\n\n\n\n\n**`by`**`allow grouping`\n\n\n\n\n```{mermaid}\nflowchart LR\nby --> grouping\n```\n\n\n\n\n### Aggregation\n\nTo group or aggregate data based on a `key`, the `by` operator can be used.\n\n``` r\ndtmn=dt[,mean(posttest.score), by=.(type.class)]\ndtmn\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtmn=dt[,mean(posttest.score), by=.(type.class)]\ndtmn\n##    type.class       V1\n##        <char>    <num>\n## 1:    virtual 78.20000\n## 2:   physical 77.91667\n```\n:::\n\n\n\n\n`data.table` allow fast reading of data in to data table\n\n\n\n\n```{mermaid}\nflowchart TD\n  A[multiple data tables] --> B(map)\n  B --> C(rbind or rbindlist)\n  C --> D[Stack one on top of another column]\n  A --> E[merge]\n  E --> F(attach raws to the side of raws)\n```\n\n\n\n\n### rbind\n\n`rbind ( )` stacks data variables on top of one another from different data. tables. For this to work all the identifiers should be same on the different files that has to be compiled.\n\n``` r\n#| collapse: true\nlibrary(readxl)\nJan <- read_excel(\"Jan.xlsx\")\njandt=as.data.table(Jan)\nstr(jandt)\n\nFeb <- read_excel(\"Feb.xlsx\")\nfebdt=as.data.table(Feb)\nstr(febdt)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nJan <- read_excel(\"Jan.xlsx\")\njandt=as.data.table(Jan)\nstr(jandt)\n## Classes 'data.table' and 'data.frame':\t10 obs. of  4 variables:\n##  $ Name      : chr  \"xy\" \"xy\" \"xy\" \"xy\" ...\n##  $ Age       : chr  \"dd\" \"dd\" \"dd\" \"dd\" ...\n##  $ Sex       : chr  \"ss\" \"ss\" \"ss\" \"scut\" ...\n##  $ Occupation: num  1 1 1 200 1 1 1 1 2 2\n##  - attr(*, \".internal.selfref\")=<externalptr>\n\nFeb <- read_excel(\"feb.xlsx\")\nfebdt=as.data.table(Feb)\nstr(febdt)\n## Classes 'data.table' and 'data.frame':\t10 obs. of  4 variables:\n##  $ Name      : chr  \"ab\" \"ab\" \"ab\" \"ab\" ...\n##  $ Age       : chr  \"cc\" \"cc\" \"cc\" \"cc\" ...\n##  $ Sex       : chr  \"tt\" \"tt\" \"tt\" \"sambu\" ...\n##  $ Occupation: num  3 3 3 500 2 2 2 2 2 2\n##  - attr(*, \".internal.selfref\")=<externalptr>\n```\n:::\n\n\n\n\n``` r\n#| collapse: true\nrbind(jandt,febdt)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbind(jandt,febdt)\n##       Name    Age    Sex Occupation\n##     <char> <char> <char>      <num>\n##  1:     xy     dd     ss          1\n##  2:     xy     dd     ss          1\n##  3:     xy     dd     ss          1\n##  4:     xy     dd   scut        200\n##  5:     xy     dd     ss          1\n##  6:     xy     dd     ss          1\n##  7:     xy     dd     ss          1\n##  8:     xy     dd      s          1\n##  9:     xy     dd      y          2\n## 10:     xy     dd      y          2\n## 11:     ab     cc     tt          3\n## 12:     ab     cc     tt          3\n## 13:     ab     cc     tt          3\n## 14:     ab     cc  sambu        500\n## 15:     ab     cc     tt          2\n## 16:     ab     cc     tt          2\n## 17:     ab     cc     tt          2\n## 18:     ab     cc     tt          2\n## 19:     ab     cc     tt          2\n## 20:     ab     cc     tt          2\n##       Name    Age    Sex Occupation\n```\n:::\n\n\n\n\n#### merge\n\n\n\n\n```{mermaid}\nflowchart TD\n  A[merge] --> B(outer join)\n  B --> C(use all=TRUE)\n  A --> D[left join]\n  D --> E[use all.x=TRUE]\n  A --> F(right join)\n  F --> G(use all.y=TRUE)\n \n```\n\n\n\n\nWe can merge the data tables using `merge ( )` function, if there is at-least one common identifier in each row.\n\neg: Assume we have two data tables with a common identifier ID.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data.table package\nlibrary(data.table)\n\n# Create the first data table with names and ages\ndt1 <- data.table(\n  id=c(\"1\",\"2\",\"3\",\"4\",\"5\"),\n  Name = c(\"Scut\", \"Sambu\", \"Shibu\", \"Diana\", \"Echu\"),\n  Age = c(28, 34, 23, 41, 30)\n)\n\n# Create the second data table with sex and occupation\ndt2 <- data.table(\n  id=c(\"1\",\"2\",\"3\",\"4\",\"5\"),\n  Sex = c(\"Female\", \"Male\", \"Male\", \"Female\", \"Male\"),\n  Occupation = c(\"Fraudster\", \"Doctor\", \"Artist\", \"Teacher\", \"Chef\")\n)\n\n# Print the data tables to verify\nprint(dt1)\n##        id   Name   Age\n##    <char> <char> <num>\n## 1:      1   Scut    28\n## 2:      2  Sambu    34\n## 3:      3  Shibu    23\n## 4:      4  Diana    41\n## 5:      5   Echu    30\nprint(dt2)\n##        id    Sex Occupation\n##    <char> <char>     <char>\n## 1:      1 Female  Fraudster\n## 2:      2   Male     Doctor\n## 3:      3   Male     Artist\n## 4:      4 Female    Teacher\n## 5:      5   Male       Chef\n```\n:::\n\n\n\n\nNow we can merge dt1 and dt2 using `merge( )` function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|collapse: TRUE\ndtf=merge.data.table(dt1,dt2, by=\"id\", all = TRUE)\nhead(dtf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <id>\n       id   Name   Age    Sex Occupation\n   <char> <char> <num> <char>     <char>\n1:      1   Scut    28 Female  Fraudster\n2:      2  Sambu    34   Male     Doctor\n3:      3  Shibu    23   Male     Artist\n4:      4  Diana    41 Female    Teacher\n5:      5   Echu    30   Male       Chef\n```\n\n\n:::\n:::\n\n\n\n\n## readxl() and map()\n\nIf data is in multiple excel files, use `readxl( )`, `map ( )` and `rbindlist ( )` to compile data.\n\n`map ( )` comes with `purr` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(purrr)\n## \n## Attaching package: 'purrr'\n## The following object is masked from 'package:data.table':\n## \n##     transpose\n\nfilelist=list.files(path=\"/Users/drkmenon/Sync/knotesquarto/Biomedical/Research Methodology\",pattern='xlsx',full.names = TRUE)\n\n\nprocess.file=function(df) {\n   sales=df[1:5,4]\n   employee=df[1:5,3]\n   return(data.table(sales=sales,employee=employee))\n}\n   \n\ncompiled.data=filelist |>\n  map(read_excel) |>\n  map(process.file) |>\n  rbindlist()\n\ncompiled.data\n##     sales.Occupation employee.Sex\n##                <num>       <char>\n##  1:                3           tt\n##  2:                3           tt\n##  3:                3           tt\n##  4:              500        sambu\n##  5:                2           tt\n##  6:                1           ss\n##  7:                1           ss\n##  8:                1           ss\n##  9:              200         scut\n## 10:                1           ss\n```\n:::\n\n\n\n\n## Data to tidy data\n\nA tidy data should satisfy following criteria\n\n-   Each variable forms a column\n\n-   Each observation should form a row\n\n-   Each observation unit forms a table\n\nIn tidy data there are two types of data points\n\n-   Identifying variable (key)\n\n-   Measures/Values\n\neg:\n\n| ID  | Person | Points | Consumption |\n|-----|--------|--------|-------------|\n| 1   | scut   | 1      | 100         |\n| 2   | sambu  | 30     | 10          |\n| 3   | shibu  | 50     | 5           |\n\n: An example tidy data table\n\n## Untidy data\n\nFollowing data is not so tidy\n\n| ID  | Religion | 10-20k | 20-30k | \\>30k |\n|-----|----------|--------|--------|-------|\n| Jew | Jew      | 100    | 20     | 10    |\n| Chr | Chr      | 200    | 40     | 15    |\n| Hin | Hin      | 2      | 30     | 500   |\n\n: Not so tidy data\n\n### How to tidy data\n\n`melt ( )` to pivot long and `dcast( )` for pivot wide\n\n::: callout-note\n### melt\n\nIt takes a single row of N columns and turn it in to N rows in a single column, using keys\n:::\n\n`melt ( )` asks for\n\n-   data.table\n\n-   id.vars\n\n-   measure.vars (Column names)\n\n-   variable.name (new name)\n\n-   value.name (new name)\n\n#### Syntax\n\n``` r\ndf |>\n\nmelt(measure.vars=patterns='^xyz',\n     variable.name= \"\",\n     value.name='')\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwd=data.table(\n  ID=c(1,2,3),\n  Religion=c(\"jew\",\"chr\",\"hin\"),\n  \"10-20k\"=c(100,200,2),\n  \"20-30k\"=c(20,40,30),\n  \">30k\"=c(10,15,500)\n)\nhead(wd)\n##       ID Religion 10-20k 20-30k  >30k\n##    <num>   <char>  <num>  <num> <num>\n## 1:     1      jew    100     20    10\n## 2:     2      chr    200     40    15\n## 3:     3      hin      2     30   500\n```\n:::\n\n\n\n\n#### Make data.table \"wd\" long\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwd |>\nmelt(measure.vars = patterns('k'),\n    variable.name = \"Income\",\n    value.name = \"Number\"\n  )\n##       ID Religion Income Number\n##    <num>   <char> <fctr>  <num>\n## 1:     1      jew 10-20k    100\n## 2:     2      chr 10-20k    200\n## 3:     3      hin 10-20k      2\n## 4:     1      jew 20-30k     20\n## 5:     2      chr 20-30k     40\n## 6:     3      hin 20-30k     30\n## 7:     1      jew   >30k     10\n## 8:     2      chr   >30k     15\n## 9:     3      hin   >30k    500\n```\n:::\n\n\n\n\n### Adding data to r and reading it as data.table\n\nWe may once more visit how to add data to `r` using data table and try to do simple analysis\n\n``` r\nlibrary(data.table)\ndt=fread(\"virtual.csv\")\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\ndt=fread(\"virtual.csv\")\n```\n:::\n\n\n\n\n### How to look at data\n\n#### vtable\n\n`vtable` is a package that helps to display the structure better than other commands.\n\n``` r\n#| collapse: true\nvtable::vt(dt)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvtable::vt(dt)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>dt</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Name </th>\n   <th style=\"text-align:left;\"> Class </th>\n   <th style=\"text-align:left;\"> Values </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> idertifier </td>\n   <td style=\"text-align:left;\"> character </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> type.class </td>\n   <td style=\"text-align:left;\"> character </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> pretest.score </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 0 to 80 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> pretest.rank </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 1 to 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> posttest.score </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 50 to 100 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> posttest.rank </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 3 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sex </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 1 to 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.1 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 3 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.2 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.3 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.4 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.5 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.6 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.7 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 3 to 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.8 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.9 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.10 </td>\n   <td style=\"text-align:left;\"> integer </td>\n   <td style=\"text-align:left;\"> Num: 2 to 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> likert.total </td>\n   <td style=\"text-align:left;\"> numeric </td>\n   <td style=\"text-align:left;\"> Num: 3.1 to 4.1 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n#### Other methods\n\n-   str(dt) \n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    str(dt)\n    ## Classes 'data.table' and 'data.frame':\t49 obs. of  18 variables:\n    ##  $ idertifier    : chr  \"VIR1\" \"VIR2\" \"VIR3\" \"VIR4\" ...\n    ##  $ type.class    : chr  \"virtual\" \"virtual\" \"virtual\" \"virtual\" ...\n    ##  $ pretest.score : int  40 40 60 40 60 60 40 40 20 60 ...\n    ##  $ pretest.rank  : int  2 2 3 2 3 3 2 2 1 3 ...\n    ##  $ posttest.score: int  100 95 85 70 75 90 80 60 90 90 ...\n    ##  $ posttest.rank : int  5 5 5 4 4 5 4 3 5 5 ...\n    ##  $ sex           : int  1 1 2 2 1 1 2 2 2 2 ...\n    ##  $ likert.1      : int  3 3 4 5 4 3 4 3 4 3 ...\n    ##  $ likert.2      : int  4 5 4 4 4 5 4 5 5 5 ...\n    ##  $ likert.3      : int  3 4 3 4 3 3 4 3 3 4 ...\n    ##  $ likert.4      : int  3 2 3 2 3 2 3 2 3 2 ...\n    ##  $ likert.5      : int  4 3 4 3 4 3 4 2 4 3 ...\n    ##  $ likert.6      : int  4 4 3 4 3 4 3 3 4 4 ...\n    ##  $ likert.7      : int  4 4 4 4 4 3 3 3 3 3 ...\n    ##  $ likert.8      : int  2 3 2 3 2 3 2 4 4 4 ...\n    ##  $ likert.9      : int  4 4 3 4 4 3 3 4 4 4 ...\n    ##  $ likert.10     : int  2 4 2 2 2 4 2 2 3 4 ...\n    ##  $ likert.total  : num  3.3 3.6 3.2 3.5 3.3 3.3 3.2 3.1 3.7 3.6 ...\n    ##  - attr(*, \".internal.selfref\")=<externalptr>\n    ```\n    :::\n\n\n\n\n-   tables(dt)\n\n-   summary(dt) \n\n### Stages of data wrangling\n\nHaving added the data and looked in to the structure, me have to go through 3 stages before we can do analysis especially if the record is not structured properly\n\n-   from record to data\n\n-   data to tidy data\n\n-   from tidy data to data analysis. \n\n### Process of wrangling\n\n#### From records to data\n\n::: callout-note\n## Record\n\n'Raw source', not in workable format. \n:::\n\n#### Create a data.table\n\nvirtual.csv has multiple columns, of which we require only the following:\n\n``` r\nfdt=dt[,.(identifier=as.factor(idertifier),type.class=as.factor(type.class),posttest.score=as.numeric(posttest.score),pretest.score=as.numeric(pretest.score),total.likert=as.numeric(likert.total), sex=as.factor(sex))]\nhead(fdt)\n```\n\nHere we can see that using `j`, we have sub-setted, renamed and fixed the type of data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfdt=dt[,.(identifier=as.factor(idertifier),type.class=as.factor(type.class),posttest.score=as.numeric(posttest.score),pretest.score=as.numeric(pretest.score),total.likert=as.numeric(likert.total), sex=as.factor(sex))]\nhead(fdt)\n##    identifier type.class posttest.score pretest.score total.likert    sex\n##        <fctr>     <fctr>          <num>         <num>        <num> <fctr>\n## 1:       VIR1    virtual            100            40          3.3      1\n## 2:       VIR2    virtual             95            40          3.6      1\n## 3:       VIR3    virtual             85            60          3.2      2\n## 4:       VIR4    virtual             70            40          3.5      2\n## 5:       VIR5    virtual             75            60          3.3      1\n## 6:       VIR6    virtual             90            60          3.3      1\n```\n:::\n\n\n\n\nIn our study, the outcome variables are `posttest.score` and `total.likert`. The grouping variable is `type.class`.\n\n### Summary of data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fdt)\n##    identifier    type.class posttest.score   pretest.score    total.likert  \n##  PHY1   : 1   physical:24   Min.   : 50.00   Min.   : 0.00   Min.   :3.100  \n##  PHY10  : 1   virtual :25   1st Qu.: 75.00   1st Qu.:20.00   1st Qu.:3.500  \n##  PHY11  : 1                 Median : 80.00   Median :40.00   Median :3.700  \n##  PHY12  : 1                 Mean   : 78.06   Mean   :41.63   Mean   :3.665  \n##  PHY13  : 1                 3rd Qu.: 85.00   3rd Qu.:60.00   3rd Qu.:3.800  \n##  PHY14  : 1                 Max.   :100.00   Max.   :80.00   Max.   :4.100  \n##  (Other):43                                                                 \n##  sex   \n##  1:18  \n##  2:31  \n##        \n##        \n##        \n##        \n## \nattach(fdt)\nmean.score= fdt[,mean(posttest.score),by=type.class]\nmean.pre.score= fdt[,mean(pretest.score),by=type.class]\nmean.likert= fdt[,mean(total.likert),by=type.class]\nmean.pre.score\n##    type.class       V1\n##        <fctr>    <num>\n## 1:    virtual 47.20000\n## 2:   physical 35.83333\nmean.score\n##    type.class       V1\n##        <fctr>    <num>\n## 1:    virtual 78.20000\n## 2:   physical 77.91667\nmean.likert\n##    type.class       V1\n##        <fctr>    <num>\n## 1:    virtual 3.504000\n## 2:   physical 3.833333\nboxplot(posttest.score~type.class, main=\"Box plot showing Post test score vs type of class\")\n```\n\n::: {.cell-output-display}\n![](wrangling_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n\n```{.r .cell-code}\nboxplot(pretest.score~type.class,main=\"Box plot showing Pre test score vs type of class\")\n```\n\n::: {.cell-output-display}\n![](wrangling_files/figure-html/unnamed-chunk-29-2.png){width=672}\n:::\n\n```{.r .cell-code}\nboxplot(total.likert~type.class, main=\"Box plot showing likert score vs type of class\")\n```\n\n::: {.cell-output-display}\n![](wrangling_files/figure-html/unnamed-chunk-29-3.png){width=672}\n:::\n\n```{.r .cell-code}\nboxplot(total.likert~sex, main=\"Box plot showing likert score vs sex\")\n```\n\n::: {.cell-output-display}\n![](wrangling_files/figure-html/unnamed-chunk-29-4.png){width=672}\n:::\n:::\n\n\n\n\n### Check for normality visually\n\n``` r\nhist(posttest.score, main = \"\",breaks = 15)\nhist(total.likert, main=\"\",breaks = 10)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(posttest.score, main = \"Histogram showing non normal distribution of post test score\",breaks = 15)\n```\n\n::: {.cell-output-display}\n![](wrangling_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(total.likert, main=\"Histogram showing doubtful normal distribution of likert score\",breaks = 10)\n```\n\n::: {.cell-output-display}\n![](wrangling_files/figure-html/unnamed-chunk-30-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(fdt)+\n  geom_histogram(mapping = aes(x=posttest.score))+\n  labs(title = \"test\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](wrangling_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\nHere we can see that both posttest.score and total.likert are visually not normally distributed. He may cross check it by doing shapiro test\n\n### Test for normality\n\n``` r\nshapiro.test(posttest.score)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(posttest.score)\n## \n## \tShapiro-Wilk normality test\n## \n## data:  posttest.score\n## W = 0.92716, p-value = 0.004812\n```\n:::\n\n\n\n\na `p value` of \\<.005 suggest that posttest score is significantly not normal.\n\n### Welch t test\n\nAs data is not normal, we have to do modified t test.\n\n``` r\nt.test(posttest.score,pretest.score,var.equal=FALSE)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(posttest.score,pretest.score,var.equal=FALSE)\n## \n## \tWelch Two Sample t-test\n## \n## data:  posttest.score and pretest.score\n## t = 10.032, df = 71.146, p-value = 2.929e-15\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  29.18870 43.66845\n## sample estimates:\n## mean of x mean of y \n##  78.06122  41.63265\n```\n:::\n\n\n\n\n``` r\nt.test(posttest.score~type.class,var.equal=FALSE)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(posttest.score~type.class,var.equal=FALSE)\n## \n## \tWelch Two Sample t-test\n## \n## data:  posttest.score by type.class\n## t = -0.085737, df = 45.72, p-value = 0.932\n## alternative hypothesis: true difference in means between group physical and group virtual is not equal to 0\n## 95 percent confidence interval:\n##  -6.936392  6.369726\n## sample estimates:\n## mean in group physical  mean in group virtual \n##               77.91667               78.20000\n```\n:::\n\n\n\n\n### Shapiro test for total.likert\n\n``` r\nshapiro.test(total.likert)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(total.likert)\n## \n## \tShapiro-Wilk normality test\n## \n## data:  total.likert\n## W = 0.96471, p-value = 0.1479\n```\n:::\n\n\n\n\nHere the shapiro test is not significant. So the data can be taken as normal.\n\n``` r\nt.test(total.likert~type.class)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(total.likert~type.class)\n## \n## \tWelch Two Sample t-test\n## \n## data:  total.likert by type.class\n## t = 5.9265, df = 42.974, p-value = 4.686e-07\n## alternative hypothesis: true difference in means between group physical and group virtual is not equal to 0\n## 95 percent confidence interval:\n##  0.2172646 0.4414021\n## sample estimates:\n## mean in group physical  mean in group virtual \n##               3.833333               3.504000\n```\n:::\n\n\n\n\n## Creating breaks\n\n``` r\n{r}\nage=c(1:100)\ndtb=data.table(age=age,sex=c(rbinom(n = 100,size = 1,prob = .5)))\ndtb$class=cut(dtb$age,breaks = c(0,13,28,60,75,101),labels = c(\"child\",\"young\",\"mature\",\"old\",\"aged\"))\nhead(dtb)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage=c(1:100)\ndtb=data.table(age=age,sex=c(rbinom(n = 100,size = 1,prob = .5)))\ndtb$class=cut(dtb$age,breaks = c(0,13,28,60,75,101),labels = c(\"child\",\"young\",\"mature\",\"old\",\"aged\"))\nhead(dtb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     age   sex  class\n   <int> <int> <fctr>\n1:     1     0  child\n2:     2     0  child\n3:     3     1  child\n4:     4     1  child\n5:     5     0  child\n6:     6     1  child\n```\n\n\n:::\n:::\n\n\n\n\n### Making data wide\n\n``` r\n{r}\ndtw=dcast(data = dtb,formula = age~sex,value.var = \"class\")\nhead(dtw)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtw=dcast(data = dtb,formula = age~sex,value.var = \"class\")\nhead(dtw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <age>\n     age      0      1\n   <int> <fctr> <fctr>\n1:     1  child   <NA>\n2:     2  child   <NA>\n3:     3   <NA>  child\n4:     4   <NA>  child\n5:     5  child   <NA>\n6:     6   <NA>  child\n```\n\n\n:::\n:::\n",
    "supporting": [
      "wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}